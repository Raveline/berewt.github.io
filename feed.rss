<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Codice and Circenses</title>
        <link>http://nicolas.biri.name/</link>
        <description><![CDATA[IT, Programming, boardgames and random thoughts]]></description>
        <atom:link href="http://nicolas.biri.name//feed.rss" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 26 Jul 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Union Type in Idris (Part 1)</title>
    <link>http://nicolas.biri.name//posts/2016-07-26-union-type-in-idris-part-1.html</link>
    <description><![CDATA[<div class="info">
    Posted on July 26, 2016
    
        by Nicolas Biri
    
</div>

<p><strong>TL;DR:</strong> This article discusses the interest of union types and presents an implementation of this concept in Idris.</p>
<h1 id="an-introduction-to-sum-and-union-types">An introduction to sum and union types</h1>
<p>If you are familiar with language like Haskell or Scala, you may know what a sum type is. Consider the following example in Haskell:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Whisky</span> <span class="fu">=</span> <span class="dt">Whisky</span> {<span class="ot">age ::</span> <span class="dt">Nat</span>,<span class="ot"> alcohol ::</span> <span class="dt">Float</span>}
<span class="kw">data</span> <span class="dt">Beer</span> <span class="fu">=</span> <span class="dt">Beer</span> {<span class="ot">alcohol ::</span> <span class="dt">Float</span>}

<span class="kw">data</span> <span class="dt">Alcohol</span> <span class="fu">=</span> <span class="dt">AlcoholWhisky</span> <span class="dt">Whisky</span> <span class="fu">|</span> <span class="dt">AlcoholBeer</span> <span class="dt">Beer</span>

<span class="ot">myAlcohol ::</span> <span class="dt">Alcohol</span>
myAlcohol <span class="fu">=</span> <span class="dt">AlcoholWhisky</span> (<span class="dt">Whisky</span> <span class="dv">12</span> <span class="dv">40</span>)</code></pre></div>
<p>In this short example, <code>Alcohol</code> is a sum type. It’s called like this because the number of inhabitants of this type is the sum of the inhabitants of the type <code>Whisky</code> and of those of the type <code>Beer</code>.</p>
<p>I always thought that the need of the <code>Alcohol</code> constructors (<code>AlcoholWhisky</code> and <code>AlcoholBeer</code>) is a little clumpsy in such types. It’s getting worse when we stack sums:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Water</span> <span class="fu">=</span> <span class="dt">Water</span> {<span class="ot">calcium ::</span> <span class="dt">Float</span>}
<span class="kw">data</span> <span class="dt">OrangeJuice</span> <span class="fu">=</span> <span class="dt">Water</span> {<span class="ot">sugar ::</span> <span class="dt">Float</span>}

<span class="kw">data</span> <span class="dt">NoAlcohol</span> <span class="fu">=</span> <span class="dt">NoAlcoholWater</span> <span class="dt">Water</span> <span class="fu">|</span> <span class="dt">NoAlcoholOrangeJuice</span> <span class="dt">OrangeJuice</span>

<span class="kw">data</span> <span class="dt">Beverage</span> <span class="fu">=</span> <span class="dt">BeverageAlcohol</span> <span class="dt">Alcohol</span> <span class="fu">|</span> <span class="dt">BeverageNoAlcohol</span> <span class="dt">NoAlcohol</span>

<span class="ot">myBeverage ::</span> <span class="dt">Beverage</span>
myBeverage <span class="fu">=</span> <span class="dt">BeverageAlcohol</span> myAlcohol</code></pre></div>
<p>It would be easier if we can claim that a type <code>t</code> is a union of several types and provides any of these types vaule as a value of type <code>t</code>.</p>
<p>This idea is not new, it’s for example investigated in the <a href="http://hackage.haskell.org/package/open-union"><code>open-union</code></a> package. Thanks to this package, we can replace the first example with something like:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Alcohol</span> <span class="fu">=</span> <span class="dt">Union</span> <span class="ch">&#39;[Whisky, Beer]</span>


<span class="ot">myAlcohol ::</span> <span class="dt">Alcohol</span>
myAlcohol <span class="fu">=</span> liftUnion (<span class="dt">Whisky</span> <span class="dv">12</span> <span class="dv">40</span>)</code></pre></div>
<p><code>open-union</code> is a great solution in Haskell. However, it relies on <code>Data.Dynamic</code> which means that we need to carry over the representation of the type.</p>
<h1 id="defining-union-types-in-idris">Defining union types in Idris</h1>
<p><a href="http://www.idris-lang.org/">Idris</a> is a purely functional programming language with dependent-type designed by Edwin Brady. I assume here a basic knowledge of Idris and of dependent types.</p>
<h2 id="declaring-union-types">Declaring union types</h2>
<p>Suppose that you can promote the values as types, how would it helps to build an union type? This question was the one that started the journey.</p>
<p>Here was the idea: we can define a type as a list of type. From there, it suffices to find a way to “point” the valid type in our union and we obtain an union for free. Here is the implementation:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="kw">data</span> <span class="dt">Union</span> <span class="ot">:</span> <span class="dt">List</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span>
  <span class="dt">MemberHere</span> <span class="ot">:</span> ty <span class="ot">-&gt;</span> <span class="dt">Union</span> (ty<span class="ot">::</span>ts)
  <span class="dt">MemberThere</span> <span class="ot">:</span> <span class="dt">Union</span> ts <span class="ot">-&gt;</span> <span class="dt">Union</span> (ty<span class="ot">::</span>ts)</code></pre></div>
<p>So, <code>Union</code> is a type that is parametrized by a list of types. For example, with this data declaration, <code>Union [Char, String]</code> is a valid type.</p>
<p>To build members of <code>Union</code> we have two constructors. <code>MemberHere</code> is the easiest. Given a value of type <code>ty</code>, we can build an instance of any <code>Union</code> type such that the list of its composed types starts with <code>ty</code>, whatever are the other types of the union. <code>MemberThere</code> provides a way to prepend other types in our <code>Union</code>. Let’s see these types in action:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">x</span> <span class="ot">:</span> <span class="dt">Union</span> [<span class="dt">String</span>, <span class="dt">Nat</span>, <span class="dt">List</span> <span class="dt">String</span>]
x <span class="fu">=</span> <span class="dt">MemberHere</span> <span class="st">&quot;Ahoy!&quot;</span>

<span class="fu">y</span> <span class="ot">:</span> <span class="dt">Union</span> [<span class="dt">String</span>, <span class="dt">Nat</span>, <span class="dt">List</span> <span class="dt">String</span>]
x <span class="fu">=</span> <span class="dt">MemberThere</span> (<span class="dt">MemberHere</span> <span class="dv">3</span>)</code></pre></div>
<p>With this basic definitions, we have in hands all we need to create union types. Altough, the instances are really painful to write, even more than with classic sum types.</p>
<p>We can do way better with a small helper:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">member</span> <span class="ot">:</span> ty <span class="ot">-&gt;</span> {<span class="kw">auto</span> e<span class="ot">:</span> <span class="dt">Elem</span> ty ts} <span class="ot">-&gt;</span> <span class="dt">Union</span> ts
member x {e<span class="fu">=</span><span class="dt">Here</span>} <span class="fu">=</span> <span class="dt">MemberHere</span> x
member x {e<span class="fu">=</span><span class="dt">There</span> later} <span class="fu">=</span> <span class="dt">MemberThere</span> (member x {e<span class="fu">=</span>later})</code></pre></div>
<p>This short function takes advantages of Idris <a href="http://docs.idris-lang.org/en/latest/tutorial/miscellany.html#auto-implicit-arguments">auto implicit arguments</a>, which automatically computes argument at compile times, depending on the executino context. The idea is that, given a type <code>ty</code>, such that <code>ty</code> is in the union, we can compute the location of this type in the union and provide an <code>Elem</code>. This <code>Elem</code> is then used to compute the <code>Union</code> boilerplate. An we obtain:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">x</span> <span class="ot">:</span> <span class="dt">Union</span> [<span class="dt">String</span>, <span class="dt">Nat</span>, <span class="dt">List</span> <span class="dt">String</span>]
x <span class="fu">=</span> member <span class="st">&quot;Ahoy!&quot;</span>

<span class="fu">y</span> <span class="ot">:</span> <span class="dt">Union</span> [<span class="dt">String</span>, <span class="dt">Nat</span>, <span class="dt">List</span> <span class="dt">String</span>]
x <span class="fu">=</span> member <span class="dv">3</span></code></pre></div>
<p>Note that as complex as the union will be, the instanciation will always straightforward.</p>
<h2 id="extracting-union-type">Extracting union type</h2>
<p>Ok, so union type are easy to declare and to instanciate. We also need an easy way to get our value back if we want to compete with sun types.</p>
<p>Let’s define a <code>get</code> function that extract a value of type <code>ty</code> from an union. To typecheck, <code>ty</code> must be a valid type (a type listed in the union). And we can’t be sure to obtain a <code>ty</code>. Thus, the type of <code>get</code> is:</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">get</span> <span class="ot">:</span> <span class="dt">Union</span> ts <span class="ot">-&gt;</span> {<span class="kw">auto</span> p<span class="ot">:</span> <span class="dt">Elem</span> ty ts} <span class="ot">-&gt;</span> <span class="dt">Maybe</span> ty</code></pre></div>
<p>And once again, the idea is to use the witness of the type position in the union (<code>p</code>) to compute the answer.</p>
<div class="sourceCode"><pre class="sourceCode idris"><code class="sourceCode idris"><span class="fu">get</span> <span class="ot">:</span> <span class="dt">Union</span> ts <span class="ot">-&gt;</span> {<span class="kw">auto</span> e<span class="ot">:</span> <span class="dt">Elem</span> ty ts} <span class="ot">-&gt;</span> <span class="dt">Maybe</span> ty
get (<span class="dt">MemberHere</span> x)       {e<span class="fu">=</span><span class="dt">Here</span>}    <span class="fu">=</span> <span class="dt">Just</span> x
get (<span class="dt">MemberHere</span> x)       {e<span class="fu">=</span><span class="dt">There</span> <span class="fu">_</span>} <span class="fu">=</span> <span class="dt">Nothing</span>
get (<span class="dt">MemberThere</span> x)      {e<span class="fu">=</span><span class="dt">Here</span>}    <span class="fu">=</span> <span class="dt">Nothing</span>
get (<span class="dt">MemberThere</span> later) {e<span class="fu">=</span>(<span class="dt">There</span> l)} <span class="fu">=</span> get later {e<span class="fu">=</span>l}</code></pre></div>
<p>All these case should be straight forward. And now we can have (in the REPL):</p>
<pre><code>&gt;&gt;&gt; :let x = the (Union [String, Nat, List String]) $ member &quot;Ahoy!&quot;
&gt;&gt;&gt; the (Maybe String) $ get x
Just &quot;Ahoy!&quot; : Maybe String
&gt;&gt;&gt; the (Maybe Nat) $ get x
Nothing : Maybe Nat
&gt;&gt;&gt; </code></pre>
<p>We uset <code>the</code> here to provide a Type hint, but it won’t be useful in most of the cases, as the type will be provided by the context.</p>
<h1 id="part-1-is-over">Part 1 is over</h1>
<p>That’s all for today, next time I will talk about folding union.</p>
]]></description>
    <pubDate>Tue, 26 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://nicolas.biri.name//posts/2016-07-26-union-type-in-idris-part-1.html</guid>
    <dc:creator>Nicolas Biri</dc:creator>
</item>
<item>
    <title>Après les morts</title>
    <link>http://nicolas.biri.name//posts/2015-11-17-Apres-les-morts.html</link>
    <description><![CDATA[<div class="info">
    Posted on November 17, 2015
    
        by Nicolas Biri
    
</div>

<p>Chère France,</p>
<p>Même si les morts sont toujours dans nos pensées, ton deuil prend fin. J’ai attendu cela pour t’écrire, par respect pour toi, malgré la nausée que provoquait chez moi pendant ce temps l’agitation de certains de tes représentants et de tes penseurs.</p>
<p>Que l’horreur est effroyable quand elle est proche de nous ! Je n’ai pas peur, je suis juste empli de tristesse. Triste en pensant à ces innocents qui sont morts évidemment. Triste également en pensant à la haine qui transpire d’une partie de ton peuple, haine qui m’a mis plus d’une fois le cœur au bord des lèvres ces derniers temps.</p>
<p>C’est que, vois-tu, dans toute cette horreur, je n’arrive pas à en vouloir à ceux qui sont morts. Des gens assez faibles pour partir en mission-suicide pour tuer des gens dont ils ne savent rien méritent également à mon avis un peu de compassion. Certains de ces terroristes ont grandi parmi nous, ont vécu dans nos villes, sont allés dans nos écoles, et nous n’avons pas réussi à leur inculquer un minimum de respect de la vie humaine.</p>
<p>Une part non négligeable de notre peuple flirte de manière ouverte avec la haine. Oh, rien de comparable avec la haine qui pousse à tuer des innocents non, juste celle qui crédibilise le discours de ceux qui les embrigadent. Quand j’ai lu la revendication de l’État Islamique, j’ai pensé à Zemmour, au Front National, et aux autres et je me suis dit que leurs mots et leurs gesticulations, en plus de ne résoudre aucun problème, donnent du crédit à ces discours incohérents. La haine nourrit la haine, ce n’est pas nouveau mais cette instance est tellement cruelle qu’elle est dure à supporter.</p>
<p>J’ai peur pour toi, peur que la haine te ronge, de l’extérieur comme de l’intérieur. J’ai peur mais soyons honnêtes, cette peur n’est pas une victoire des terroristes, c’est juste notre défaite.</p>
]]></description>
    <pubDate>Tue, 17 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://nicolas.biri.name//posts/2015-11-17-Apres-les-morts.html</guid>
    <dc:creator>Nicolas Biri</dc:creator>
</item>
<item>
    <title>Le Twitapéro-ludique</title>
    <link>http://nicolas.biri.name//posts/2015-01-14-Le-twitapero-ludique.html</link>
    <description><![CDATA[<div class="info">
    Posted on January 14, 2015
    
</div>

<p>Le jeu de société, passe-temps étiqueté “geek” dans la pop-culture, est un de mes passe-temps préférentiel. Pour ceux qui suivent ce blog et qui n’ont aucune autre idée de ce qu’est un jeu de société autre que les parties de Monopoly ou autre La bonne paye qu’ils ont fait enfants ou des jeux qu’ils ont vu dans les catalogues de Noël, je ne peux que leur conseiller de suivre le podcast des gens formidables de <a href="http://podcast.proxi-jeux.fr">Proxi-jeux</a>, notamment leur nouveau podcast, “<a href="http://podcast.proxi-jeux.fr/category/jouez-bien/">jouez bien</a>” qui s’adresse à ceux qui voudraient découvrir le jeu. Une autre solution est d’aller dans une ludothèque, dans un magasin spécialisé, ou de venir à une rencontre de joueurs.</p>
<p>Et tiens, en parlant de renconte de joueurs, ça tombe bien, surtout si vous avez envie de venir en Lorraine, car j’en organise une, et c’est justement de ça dont il est question aujourd’hui.</p>
<h1 id="le-twitapéro-ludique">Le twitapéro-ludique</h1>
<p>Dans jeux de société, il y a société, et n’en déplaise à Emmnuel Macron, ce n’est pas dans le sens d’entreprise. Du coup, les joueurs ont besoin de se retrouver. À coté des grandes manifestations et des clubs de joueurs, les réseaux sociaux ont bien aidé pour se retrouver. Sur Twitter existe depuis pas mal de temps l’idée des twitapéros ludiques. Contrairement à pas mal d’autres twitapéro, le nom ici est bien trompeur, car le twitapéro dure la journée. L’idée est de se retrouver chez quelqu’un, pour jouer, discuter, échanger et dire du mal de ceux qui ne sont pas venus, ce dernier point étant optionnel.</p>
<p>Les joueurs sont des gens agréables, et il n’y a donc aucune raison d’avoir peur de demander à y participer si vous en voyez un passer.</p>
<h1 id="le-twitapéro-ludique-lorrain">Le Twitapéro-ludique lorrain</h1>
<p>J’ai lancé l’idée et j’accueille la prochaine édition, un peu poussé avec plaisir par <span class="citation">[@blublugrublu]</span>(https://twitter.com/blublugrublu)). En voilà quelques détails.</p>
<h2 id="le-quand">Le quand</h2>
<p>Le 24 janvier (2015 oui), toute la journée. Comme c’est quand même le week-end et qu’il ne faut pas déconner, ça serait bien de ne pas arriver avant 9h. La fin est prévue quand vous en avez marre, généralement après la fin de The Voice. Vous pouvez arriver plus tard, repartir plus tôt, vous pouvez même ne pas venir.</p>
<h2 id="le-où">Le où</h2>
<p>Chez moi, <a href="https://goo.gl/maps/NXvQQ">ici</a>. C’est excentré, c’est perdu, si vous n’avez pas de voiture, c’est mal parti mais il y a de la place, c’est au calme (tu m’étonnes) et on annonce pas (encore) de neige.</p>
<h2 id="le-qui">Le qui</h2>
<p>Des gens ont déjà dit qu’<a href="http://doodle.com/6vnvairqwqagh3xw">ils venaient</a> ou qu’ils aimeraient venir mais qu’ils cherchaient un covoitureur (si vous voulez venir de Paris, contactez Vindeux, son email est dispo sur le lien précédent). Vous pouvez toujours venir si vous n’êtes pas inscrit. Si vous comptez venir ET cherchez un endroit pour dormir, j’ai encore quelques place à la maison, contactez moi.</p>
<h2 id="le-comment">Le comment</h2>
<p>Je prépare à manger le soir pour ceux dont je sais qu’ils viennent, le midi, chacun apporte sa nourriture et soit la garde pour lui, soit la partage avec les autres, il n’y a pas d’obligation, c’est assez libre, nous sommes Charlie. J’ai quelques bières au frais, je prendrai quelques boissons sans alcool, mais venir avec quelques boissons supplémentaire est également bienvenu.</p>
<p>Vous pouvez amener des jeux, ou pas. Vous pouvez demander à des gens d’en apporter, ou pas. Vous pouvez ne rien y connaître. Vous venez comme vous êtes, mais habillez vous d’abord.</p>
<h1 id="lorganisation">L’organisation</h1>
<p>Pour ceux qui veulent, une jolie feuille Excel <a href="https://docs.google.com/spreadsheets/d/1DysLpiTP9mOaqN669ER21jtWJ8JAxI5xwsEB9Kyuuec/edit?usp=sharing">est disponible</a> pour les participants. Si vou souhaitez venir, ça serait vraiment CHOU de votre part de s’y inscrire, surtout si vous n’avez pas répondu au doodle.</p>
<h2 id="autre-chose">Autre chose ?</h2>
<p>Si vous avez des questions, n’hésitez pas à me contacter. Et surtout, jouez bien.</p>
]]></description>
    <pubDate>Wed, 14 Jan 2015 00:00:00 UT</pubDate>
    <guid>http://nicolas.biri.name//posts/2015-01-14-Le-twitapero-ludique.html</guid>
    <dc:creator>Nicolas Biri</dc:creator>
</item>
<item>
    <title>Le mythe du savoir pratique</title>
    <link>http://nicolas.biri.name//posts/2014-07-06-Le-mythe-du-savoir-pratique.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  6, 2014
    
</div>

<p>Le problème quand on est contre une technologisation des savoirs à l’école, notamment en primaire, est le même que quand on avance face au vent un jour de tempête. De nuit. En hiver. Et qu’il pleut. Beaucoup. Bref, c’est pas l’expérience la plus agréable qui soit.</p>
<p>C’est qu’apprendre aux enfants des savoirs techniques, c’est leur apprendre à se “débrouiller”, et ça, c’est super. Ils peuvent créer, faire des choses eux mêmes, être indépendant. Ils doivent aussi pouvoir sauver le monde, la veuve et l’orphelin et avoir le poil soyeux.</p>
<p>En fait, on ne peut pas être contre l’apprentissage de nouvelles choses à un enfant, c’est super d’apprendre des trucs. Pensez vous, quand on est contre apprentissage, la balance est simple chez beaucoup: dans un cas, l’enfant a un savoir en plus, dans l’autre cas, il ne l’a pas. Quel monstre voudrait le priver d’un savoir ?</p>
<p>Quand on objecte que ce savoir nécessite du temps et que ce temps, c’est nécessairement celui d’un autre savoir, ça devient un peu plus complexe. Celles qui sortent sont en général de deux ordres :</p>
<ul>
<li>Il y a des savoirs inutiles, il suffit de prendre le temps sur l’enseignement de ceux-ci.</li>
<li>On a déjà un enseignement technique en primaire, il suffit de n’apprendre que le savoir X à la place, c’est bien plus important (X étant le savoir à la mode, dans notre cas, l’informatique).</li>
</ul>
<p>J’ai un vrai problème avec ces deux points. Et au fond, ce problème est le même dans les deux cas : pour juger quel savoir ou non est dispensable, il est nécessaire de savoir quel est le but que l’on souhaite pour l’enseignement.</p>
<p>Là encore, l’argument en faveur des savoirs techniques est implacable : connaître la technique, c’est obtenir de la liberté face aux constructeurs / commerciaux / entreprises / chats au regard mignon. Admettons.</p>
<p>Ceux qui avancent de telles théorie n’ont pas appris à bidouiller à l’école. Non, même un cours sur table traçante ou une initiation en basic ne leur a pas appris, arrêtons de se mentir, ça a pu leur donner envie, mais pas plus. En revanche, pour eux, l’école a parfaitement jouer son rôle. Elle leur a appris à avoir un regard critique, un esprit d’analyse, qui leur permet aujourd’hui de juger que ce savoir, qu’ils ont pu acquérir plus tard car l’école leur avait donner les moyens d’apprendre, leur semble important.</p>
<p>C’est à mon sens cela qui est la clé de la réussite de l’éducation : permettre à un futur citoyen de pouvoir se faire une idée éclairée sur le monde et de l’aider dans l’apprentissage de nouveaux savoirs. Pas de lui donner les outils pour une idée du monde qu’on s’est faite pour lui. Si l’on veut atteindre ce but, cela passe par plein de choses au primaire, qui ne laisse de temps à coté que pour montrer ce qu’il est possible de faire, pas pour le pratiquer suffisamment pour devenir “un bidouilleur”.</p>
<p>Accessoirement, si c’est notre but, les programmes actuels y répondent globalement bien. Les résultats ne semblent pas bon, notamment pour les élèves venant de milieux modestes, mais la réponse passe certainement plus par des outils pédagogiques que par un changement des savoirs.</p>
]]></description>
    <pubDate>Sun, 06 Jul 2014 00:00:00 UT</pubDate>
    <guid>http://nicolas.biri.name//posts/2014-07-06-Le-mythe-du-savoir-pratique.html</guid>
    <dc:creator>Nicolas Biri</dc:creator>
</item>
<item>
    <title>La place de l'algorithmique</title>
    <link>http://nicolas.biri.name//posts/2014-06-17-La-place-de-l-algorithmique.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 17, 2014
    
</div>

<p><img src="/images/hamster.jpg" alt="Une image de hamster, pour le plaisir d'embruns" /></p>
<blockquote>
<p>Algorithme: Mécanisme réglant le fonctionnement de la pensée organisée et s’explicitant par des représentations analogues à celles des mathématiciens.</p>
<p>Source : <a href="http://www.cnrtl.fr/lexicographie/algorithme">Centre National des Ressources Textuelles et Lexicales</a></p>
</blockquote>
<p>L’algorithmique est souvent présentée comme la discipline centrale de l’informatique. Ainsi, si l’on parle d’enseignement de l’informatique, rapidement se pose la question de la maîtrise de l’algorithmique par les élèves. Aujourd’hui, je vais essayer de poser quelques éléments de réflexion concernant son apprentissage dans le contexte d’un enseignement de l’informatique à l’école.</p>
<h1 id="lalgorithme-insidieux">L’algorithme insidieux</h1>
<p>Commençons par une bonne nouvelle. Avant même le début du commencement d’une réforme du <em>numérique</em> vos enfants (ou ceux de vos voisins, amis, parents) utilisent des algorithmes. Rappeler vous comment on vous a appris à additionner des nombres: Tu additionnes le chiffre le plus à droite de chaque nombre, tu écris le chiffre des unités, tu poses la retenue, tu l’ajoutes aux chiffres les plus à droite suivants, et tu continues comme cela jusqu’à ce que tu aies traité tous les chiffres (à peu près, vous avez le droit d’utiliser votre propre variation tant que vous obtenez le bon résultat). Cette mécanique <em>est</em> un algorithme. La méthode pour identifier un groupe nominal en français est aussi un algorithme. Pire, c’est un algorithme utilisé également dans certaines branche de l’informatique. L’école, insidieusement, apprend des algorithmes à vos enfants.</p>
<p>S’il n’y avait que l’école. Faites un gâteau avec votre enfant : vous regroupez les ingrédients selon la recette, vous les intégrés selon les étapes décrites et vous faites cuire selon les instructions. Un algorithme. Vous vous souvenez comment on vous a appris à lacer vos chaussures ? Algorithme. Vous êtes, nous sommes tous les monsieur Jourdain de l’algorithmique.</p>
<h1 id="de-lusage-à-la-formalisation">De l’usage à la formalisation</h1>
<p>De plus en plus, des enseignants essaient de guider les élèves vers la création de certains de ces algorithmes. De les mettre par exemple face à deux nombres et de les faire formaliser leur démarche pour les additionner. En cela, ils font plus pour faire apprendre l’informatique aux enfants que l’ensemble des gesticulations autour du <em>code à l’école</em>.</p>
<p>Cette capacité à créer un algorithme, qui peut se réduire en primaire à une verbalisation des différentes étapes de l’algorithme ou la création d’une fiche technique avec l’aide de l’enseignant peut être une activité centrale pour réussir à développer son raisonnement. En donner les clés à l’apprenant, ce n’est pas construire un savoir spécifique mais un outil pour apprendre et comprendre.</p>
<h1 id="le-rôle-de-linformatique">Le rôle de l’informatique</h1>
<p>L’algorithmique est une des matières clés de l’informatique. Réussir à “coder” un algorithme, le retranscrire dans un langage de programmation, est souvent présenter comme le premier obstacle pour un étudiant en informatique. C’est faux. Le premier obstacle est de réussir à décomposer ce qu’on souhaite faire pour comprendre l’algorithme, la retranscription vient ensuite. Tenter d’apprendre simultanément l’algorithmique et un nouveau langage, c’est augmenter la taille de l’obstacle.</p>
<p>L’avantage de l’informatique est de fournir un terrain de jeux immense pour apprendre cette formalisation. Avec des notions d’arithmétique de base et des tableaux de nombres, on peut fournir un tas d’exercice simple pour apprendre à construire des algorithmes.</p>
<p>Toutefois, ce savoir est totalement inutile si on ne réussit pas à faire passer un message épisthémologique simple: ce sont les mêmes mécanismes de base qui sont à l’oeuvre pour construire les algorithmes en mathématiques, en français ou en informatique.</p>
<h1 id="mais-alors-tu-es-pour-linformatique-à-lécole">Mais alors tu es pour l’informatique à l’école ?</h1>
<p>C’est plus compliqué que cela. Je suis pour une école qui aide les enfants à se construire. Je ne parle pas de cette idée louable mais à l’intérêt discutable à mon sens de “former des citoyens” (apprenons le tri sélectif et les dangers des réseaux sociaux). Je parle de fournir les clés pour pouvoir raisonner. L’informatique, en tant que science, peut aider. Cela n’est pas étonnant quand on sait d’où elle vient. L’informatique, en tant que technique, non. Elle peut être utilisée avec parcimonie et à condition de ne pas jouer un rôle central. Elle doit rester un support à la science, pas plus.</p>
<p>Il y a u véritable problème avec ce que j’espère: cela ne se formalise pas sur une grille d’apprentissage. C’est fournir une aide au raisonnement, simplifier l’acquisition du savoir.</p>
<p>Le discours des informaticiens qui ont l’impression de détenir un savoir qui leur donne une toute puissance sur le reste des mortels, sous-jacent au discours majoritaire est très dangereux. Et faux. Ils n’ont à la disposition qu’un outil que beaucoup d’autres possèdent inconsciemment et qu’eux même utilisent parfois très mal hors de leur domaine.</p>
<p>Image: source Wikipedia, en hommage à <a href="http://embruns.net/">Laurent</a>.</p>
]]></description>
    <pubDate>Tue, 17 Jun 2014 00:00:00 UT</pubDate>
    <guid>http://nicolas.biri.name//posts/2014-06-17-La-place-de-l-algorithmique.html</guid>
    <dc:creator>Nicolas Biri</dc:creator>
</item>

    </channel>
</rss>
